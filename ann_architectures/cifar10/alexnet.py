"""

Small CNN for Cifar10 classification, adapted from
https://github.com/akrizhevsky/cuda-convnet2/blob/master/layers/layers-cifar10-11pct.cfg

Get to 11% error, using methodology described here:
https://code.google.com/p/cuda-convnet/wiki/Methodology

"""

from __future__ import absolute_import
from __future__ import print_function

from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, Convolution2D
from keras.layers import AveragePooling2D, GaussianNoise
from keras.optimizers import SGD
from keras.utils import np_utils

from snntoolbox.io_utils.plotting import plot_history

batch_size = 64
nb_epoch = 100

# Data set
(X_train, y_train), (X_test, y_test) = cifar10.load_data()
X_train = X_train.astype("float32")
X_test = X_test.astype("float32")
X_train /= 255
X_test /= 255
Y_train = np_utils.to_categorical(y_train, 10)
Y_test = np_utils.to_categorical(y_test, 10)
print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

sigma = 0

model = Sequential()

model.add(Convolution2D(64, 5, 5, border_mode='same', input_shape=(3, 32, 32)))
model.add(Activation('relu'))
model.add(GaussianNoise(sigma))
model.add(AveragePooling2D(pool_size=(3, 3), strides=(2, 2)))
model.add(Dropout(0.25))

model.add(Convolution2D(64, 5, 5, border_mode='same'))
model.add(Activation('relu'))
model.add(GaussianNoise(sigma))
model.add(Dropout(0.25))
model.add(AveragePooling2D(pool_size=(3, 3), strides=(2, 2)))

model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(GaussianNoise(sigma))
model.add(Convolution2D(32, 3, 3))
model.add(Activation('relu'))
model.add(GaussianNoise(sigma))

model.add(Flatten())
model.add(Dense(10))
model.add(Activation('softmax'))

sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd,
              metrics=['accuracy'])

# Whether to apply global contrast normalization and ZCA whitening
gcn = True
zca = True

traingen = ImageDataGenerator(rescale=1./255, featurewise_center=gcn,
                              featurewise_std_normalization=gcn,
                              zca_whitening=zca, horizontal_flip=True,
                              rotation_range=10, width_shift_range=0.1,
                              height_shift_range=0.1)

# Compute quantities required for featurewise normalization
# (std, mean, and principal components if ZCA whitening is applied)
traingen.fit(X_train/255.)

trainflow = traingen.flow(X_train, Y_train, batch_size=batch_size)

testgen = ImageDataGenerator(rescale=1./255, featurewise_center=gcn,
                             featurewise_std_normalization=gcn,
                             zca_whitening=zca)

testgen.fit(X_test/255.)

testflow = testgen.flow(X_test, Y_test, batch_size=batch_size)

# Fit the model on the batches generated by datagen.flow()
history = model.fit_generator(trainflow, nb_epoch=nb_epoch,
                              samples_per_epoch=X_train.shape[0],
                              validation_data=testflow,
                              nb_val_samples=len(X_test))
plot_history(history)

score = model.evaluate_generator(testflow, val_samples=len(X_test))
print('Test score:', score[0])
print('Test accuracy:', score[1])

model.save('{:2.2f}.h5'.format(score[1]*100))
